{"version":3,"sources":["app/views/reddit/search_container/search_container.jsx"],"names":["select","state","gettingRedditSchema","reddit","redditSchemaError","redditSchema","RedditSearchContainer","dispatch","func","isRequired","propTypes","redditNews","bool","props","current","handleGetRedditSchema","newCurrent","setState","nameSchema","push","asMutable","deep","handleGoToProfile","bind","handrleSetNewCurrent","handrleDeleteCurrent"],"mappings":";;;;;;;;;;;AAAA;;;;AACA;;AACA;;AACA;;;;AACA;;;;;;;;;;AAEA,IAAMA,SAAS,SAATA,MAAS,CAACC,KAAD;AAAA,SAAY;AACzBC,yBAAqBD,MAAME,MAAN,CAAaD,mBADT;AAEzBE,uBAAmBH,MAAME,MAAN,CAAaC,iBAFP;AAGzBC,kBAAcJ,MAAME,MAAN,CAAaE;AAHF,GAAZ;AAAA,CAAf;;IAOqBC,qB,WADpB,yBAAQN,MAAR,C;;;;;wBAEwB;AACrB,aAAO;AACLO,kBAAU,iBAAUC,IAAV,CAAeC,UADpB;AAELJ,sBAAc,iBAAOK,SAAP,CAAiBC,UAF1B;AAGLT,6BAAqB,iBAAUU;AAH1B,OAAP;AAKD;;;AAED,iCAAYC,KAAZ,EAAmB;AAAA;;AAAA,8IACXA,KADW;;AAEjB,UAAKZ,KAAL,GAAa;AACXa,eAAS;AADE,KAAb;AAFiB;AAKlB;;;;yCAEoB;AACnB,WAAKC,qBAAL,CAA2B,OAA3B;AACD;;;yCAEoBC,U,EAAY;AAC/B,WAAKC,QAAL,CAAc,EAAEH,SAASE,UAAX,EAAd;AACD;;;2CAEsB;AACrB,WAAKC,QAAL,CAAc,EAAEH,SAAS,IAAX,EAAd;AACD;;;0CAEqBI,U,EAAY;AAAA,UACxBX,QADwB,GACX,KAAKM,KADM,CACxBN,QADwB;;AAEhCA,eAAS,4CAAgBW,UAAhB,CAAT;AACD;;;wCAGmB;AAClB,kCAAeC,IAAf,CAAoB,SAApB;AACD;;;6BAEQ;AACP,aACE;AACE,oBAAY,KAAKN,KAAL,CAAWR,YAAX,CAAwBe,SAAxB,CAAkC,EAAEC,MAAM,IAAR,EAAlC,CADd;AAEE,uBAAe,KAAKC,iBAAL,CAAuBC,IAAvB,CAA4B,IAA5B,CAFjB;AAGE,yBAAiB,KAAKR,qBAAL,CAA2BQ,IAA3B,CAAgC,IAAhC,CAHnB;AAIE,yBAAiB,KAAKC,oBAAL,CAA0BD,IAA1B,CAA+B,IAA/B,CAJnB;AAKE,yBAAiB,KAAKE,oBAAL,CAA0BF,IAA1B,CAA+B,IAA/B,CALnB;AAME,iBAAS,KAAKtB,KAAL,CAAWa;AANtB,QADF;AAUD;;;;;kBAjDkBR,qB;;;;;;;;gCAPfN,M;;gCAOeM,qB","file":"search_container.jsx","sourceRoot":"/Users/damian.taborda/ws/whiteprompt/reddit/DamianTaborda_WebCodeChallenge","sourcesContent":["import React, { Component, PropTypes } from 'react';\nimport { browserHistory } from 'react-router';\nimport { connect } from 'react-redux';\nimport Search from './search';\nimport { getRedditSchema } from 'action_creators/reddit_action_creator';\n\nconst select = (state) => ({\n  gettingRedditSchema: state.reddit.gettingRedditSchema,\n  redditSchemaError: state.reddit.redditSchemaError,\n  redditSchema: state.reddit.redditSchema\n});\n\n@connect(select)\nexport default class RedditSearchContainer extends Component {\n  static get propTypes() {\n    return {\n      dispatch: PropTypes.func.isRequired,\n      redditSchema: Search.propTypes.redditNews,\n      gettingRedditSchema: PropTypes.bool\n    };\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      current: null\n    };\n  }\n\n  componentWillMount() {\n    this.handleGetRedditSchema('funny');\n  }\n\n  handrleSetNewCurrent(newCurrent) {\n    this.setState({ current: newCurrent });\n  }\n\n  handrleDeleteCurrent() {\n    this.setState({ current: null });\n  }\n\n  handleGetRedditSchema(nameSchema) {\n    const { dispatch } = this.props;\n    dispatch(getRedditSchema(nameSchema));\n  }\n\n\n  handleGoToProfile() {\n    browserHistory.push('/damian');\n  }\n\n  render() {\n    return (\n      <Search\n        redditNews={this.props.redditSchema.asMutable({ deep: true })}\n        onGoToProfile={this.handleGoToProfile.bind(this)}\n        onGetRedditNews={this.handleGetRedditSchema.bind(this)}\n        onSetNewCurrent={this.handrleSetNewCurrent.bind(this)}\n        onDeleteCurrent={this.handrleDeleteCurrent.bind(this)}\n        current={this.state.current}\n      />\n    );\n  }\n}\n"]}