'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _env = require('utils/env');

var _env2 = _interopRequireDefault(_env);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var list = [require('./reddit')];

/*
* Export the merged list of action types.
*/

var _default = list.reduce(function (result, actionTypes) {
  return tryMerge(result, actionTypes);
}, {});

exports.default = _default;

/*
* Little helper only for Dev, just throw if we find an Action that already exists
* just to make easier the development.
*/

function tryMerge(obj, newObj) {
  if (_env2.default.isDev) {
    Object.keys(newObj).forEach(function (type) {
      if (obj[type]) throw new Error('ActionType: [' + type + '] already exists');
    });
  }

  return _extends({}, obj, newObj);
}
;

var _temp = function () {
  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
    return;
  }

  __REACT_HOT_LOADER__.register(list, 'list', '/Users/damian.taborda/ws/whiteprompt/reddit/DamianTaborda_WebCodeChallenge/app/action_types/index.js');

  __REACT_HOT_LOADER__.register(tryMerge, 'tryMerge', '/Users/damian.taborda/ws/whiteprompt/reddit/DamianTaborda_WebCodeChallenge/app/action_types/index.js');

  __REACT_HOT_LOADER__.register(_default, 'default', '/Users/damian.taborda/ws/whiteprompt/reddit/DamianTaborda_WebCodeChallenge/app/action_types/index.js');
}();

;