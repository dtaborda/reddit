{"version":3,"sources":["app/action_types/utils/create_async_actions_types.js"],"names":["createAsyncActionsTypes","types","Array","isArray","Error","augmentedTypes","forEach","type","rootCode","code","request","done","fail"],"mappings":";;;;;kBAKwBA,uB;AALxB;;;;;AAKe,SAASA,uBAAT,CAAiCC,KAAjC,EAAwC;AACrD,MAAI,CAACC,MAAMC,OAAN,CAAcF,KAAd,CAAL,EAA2B;AACzB,UAAM,IAAIG,KAAJ,CAAU,6CAAV,CAAN;AACD;;AAED,MAAMC,iBAAiB,EAAvB;;AAEAJ,QAAMK,OAAN,CAAc,UAACC,IAAD,EAAU;AACtBF,mBAAeE,IAAf,IAAuB;AACrBC,gBAAU,IADW;AAErBC,YAAMF,IAFe;AAGrBG,eAAS;AACPD,cAASF,IAAT,aADO;AAEPC,kBAAUD;AAFH,OAHY;AAOrBI,YAAM;AACJF,cAASF,IAAT,UADI;AAEJC,kBAAUD;AAFN,OAPe;AAWrBK,YAAM;AACJH,cAASF,IAAT,UADI;AAEJC,kBAAUD;AAFN;AAXe,KAAvB;AAgBD,GAjBD;;AAmBA,SAAOF,cAAP;AACD;;;;;;;;gCA3BuBL,uB","file":"create_async_actions_types.js","sourceRoot":"/Users/damian.taborda/ws/whiteprompt/reddit/DamianTaborda_WebCodeChallenge","sourcesContent":["/*\n* Simple helper for creating async action types.\n* For each type provided an object with the request / done / fail\n* version is gonna be provided.\n*/\nexport default function createAsyncActionsTypes(types) {\n  if (!Array.isArray(types)) {\n    throw new Error('Expecting types to be an array of constants');\n  }\n\n  const augmentedTypes = {};\n\n  types.forEach((type) => {\n    augmentedTypes[type] = {\n      rootCode: null,\n      code: type,\n      request: {\n        code: `${type}_Request`,\n        rootCode: type\n      },\n      done: {\n        code: `${type}_Done`,\n        rootCode: type\n      },\n      fail: {\n        code: `${type}_Fail`,\n        rootCode: type\n      }\n    };\n  });\n\n  return augmentedTypes;\n}\n"]}