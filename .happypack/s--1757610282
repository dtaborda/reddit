'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = configureStore;

var _redux = require('redux');

var _reduxLogger = require('redux-logger');

var _reduxLogger2 = _interopRequireDefault(_reduxLogger);

var _reducers = require('reducers');

var _reducers2 = _interopRequireDefault(_reducers);

var _async_actions_middleware = require('middleware/async_actions_middleware');

var _async_actions_middleware2 = _interopRequireDefault(_async_actions_middleware);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function configureStore(initialState, apiClient) {
  var createStoreFunc = (0, _redux.applyMiddleware)((0, _async_actions_middleware2.default)(apiClient), (0, _reduxLogger2.default)({
    predicate: function predicate(getState, action) {
      return process.env.NODE_ENV !== 'production';
    }
  }));

  var createStoreWithMiddleware = null;

  if (__DEVELOPMENT__ && __CLIENT__ && __DEVTOOLS__ && window.devToolsExtension) {
    var _require = require('redux-devtools');

    var persistState = _require.persistState;

    createStoreWithMiddleware = (0, _redux.compose)(createStoreFunc, window.devToolsExtension(), persistState(window.location.href.match(/[?&]debug_session=([^&]+)\b/)))(_redux.createStore);
  } else {
    createStoreWithMiddleware = createStoreFunc(_redux.createStore);
  }

  var store = createStoreWithMiddleware(_reducers2.default, initialState);

  if (module.hot) {
    // Enable Webpack hot module replacement for reducers
    module.hot.accept('reducers', function () {
      var nextRootReducer = require('reducers');
      store.replaceReducer(nextRootReducer);
    });
  }

  return store;
}
;

var _temp = function () {
  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
    return;
  }

  __REACT_HOT_LOADER__.register(configureStore, 'configureStore', '/Users/damian.taborda/ws/whiteprompt/reddit/DamianTaborda_WebCodeChallenge/app/store/index.js');
}();

;