{"version":3,"sources":["app/views/reddit/search_container/search/search.jsx"],"names":["Search","newCurrent","props","onSetNewCurrent","title","author","thumbnail","numComments","num_comments","ups","downs","permalink","redditNews","data","children","map","item","index","handrleSetNewCurrent","bind","current","onDeleteCurrent","onGoToProfile","onGetRedditNews","renderRedditContent","renderShowCurrent","func","object","isRequired"],"mappings":";;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;;;;;;;;;IAGqBA,M;;;;;;;;;;;yCAaEC,U,EAAY;AAC/B,WAAKC,KAAL,CAAWC,eAAX,CACE;AACEC,eAAOH,WAAWG,KADpB;AAEEC,gBAAQJ,WAAWI,MAFrB;AAGEC,mBAAWL,WAAWK,SAHxB;AAIEC,qBAAaN,WAAWO,YAJ1B;AAKEC,aAAKR,WAAWQ,GALlB;AAMEC,eAAOT,WAAWS,KANpB;AAOEC,mBAAWV,WAAWU;AAPxB,OADF;AAWD;;;0CAEqB;AAAA;;AACpB,UAAI,KAAKT,KAAL,CAAWU,UAAX,IAAyB,KAAKV,KAAL,CAAWU,UAAX,CAAsBC,IAAnD,EAAyD;AACvD,eAAO,KAAKX,KAAL,CAAWU,UAAX,CAAsBC,IAAtB,CAA2BC,QAA3B,CAAoCC,GAApC,CAAwC,UAACC,IAAD,EAAOC,KAAP,EAAiB;AAAA,cACtDJ,IADsD,GAC7CG,IAD6C,CACtDH,IADsD;;AAE9D,iBACE;AAAA;AAAA,cAAK,KAAKI,KAAV,EAAiB,SAAS,OAAKC,oBAAL,CAA0BC,IAA1B,SAAqCN,IAArC,CAA1B;AACE;AACE,qBAAOA,KAAKT,KADd;AAEE,sBAAQS,KAAKR,MAFf;AAGE,yBAAWQ,KAAKP,SAHlB;AAIE,2BAAaO,KAAKL,YAJpB;AAKE,mBAAKK,KAAKJ,GALZ;AAME,qBAAOI,KAAKH,KANd;AAOE,yBAAWG,KAAKF;AAPlB;AADF,WADF;AAaD,SAfM,CAAP;AAgBD;AACF;;;wCAEmB;AAClB,UAAI,KAAKT,KAAL,CAAWkB,OAAf,EAAwB;AAAA,YACdA,OADc,GACF,KAAKlB,KADH,CACdkB,OADc;;AAEtB,eACE;AACE,iBAAOA,QAAQhB,KADjB;AAEE,kBAAQgB,QAAQf,MAFlB;AAGE,qBAAWe,QAAQd,SAHrB;AAIE,uBAAac,QAAQb,WAJvB;AAKE,eAAKa,QAAQX,GALf;AAME,iBAAOW,QAAQV,KANjB;AAOE,qBAAWU,QAAQT,SAPrB;AAQE,mBAAS,KAAKT,KAAL,CAAWmB;AARtB,UADF;AAYD;AACF;;;6BAEQ;AACP,aACE;AAAA;AAAA;AACE,yBAAe,KAAKnB,KAAL,CAAWoB,aAD5B;AAEE,0BAAgB,KAAKpB,KAAL,CAAWqB;AAF7B;AAIE;AAAA;AAAA;AACG,eAAKC,mBAAL,EADH;AAEG,eAAKC,iBAAL;AAFH;AAJF,OADF;AAWD;;;wBA7EsB;AACrB,aAAO;AACLH,uBAAe,iBAAUI,IADpB;AAELd,oBAAY,iBAAUe,MAFjB;AAGLJ,yBAAiB,iBAAUG,IAAV,CAAeE,UAH3B;AAILzB,yBAAiB,iBAAUuB,IAAV,CAAeE,UAJ3B;AAKLP,yBAAiB,iBAAUK,IAAV,CAAeE,UAL3B;AAMLR,iBAAS,iBAAUO;AANd,OAAP;AAQD;;;;;;kBAVkB3B,M;;;;;;;;gCAAAA,M","file":"search.jsx","sourceRoot":"/Users/damian.taborda/ws/whiteprompt/reddit/DamianTaborda_WebCodeChallenge","sourcesContent":["import React, { Component, PropTypes } from 'react';\nimport WebLayout from 'views/shared/layout/web_layout/';\nimport NewsCardUI from './news_card_ui';\nimport NewsCarDragAndDrop from './news_card_drag_and_drop';\n\nimport styles from './search.scss';\n\n\nexport default class Search extends Component {\n  static get propTypes() {\n    return {\n      onGoToProfile: PropTypes.func,\n      redditNews: PropTypes.object,\n      onGetRedditNews: PropTypes.func.isRequired,\n      onSetNewCurrent: PropTypes.func.isRequired,\n      onDeleteCurrent: PropTypes.func.isRequired,\n      current: PropTypes.object\n    };\n  }\n\n\n  handrleSetNewCurrent(newCurrent) {\n    this.props.onSetNewCurrent(\n      {\n        title: newCurrent.title,\n        author: newCurrent.author,\n        thumbnail: newCurrent.thumbnail,\n        numComments: newCurrent.num_comments,\n        ups: newCurrent.ups,\n        downs: newCurrent.downs,\n        permalink: newCurrent.permalink\n      }\n    );\n  }\n\n  renderRedditContent() {\n    if (this.props.redditNews && this.props.redditNews.data) {\n      return this.props.redditNews.data.children.map((item, index) => {\n        const { data } = item;\n        return (\n          <div key={index} onClick={this.handrleSetNewCurrent.bind(this, data)}>\n            <NewsCardUI\n              title={data.title}\n              author={data.author}\n              thumbnail={data.thumbnail}\n              numComments={data.num_comments}\n              ups={data.ups}\n              downs={data.downs}\n              permalink={data.permalink}\n            />\n          </div>\n        );\n      });\n    }\n  }\n\n  renderShowCurrent() {\n    if (this.props.current) {\n      const { current } = this.props;\n      return (\n        <NewsCarDragAndDrop\n          title={current.title}\n          author={current.author}\n          thumbnail={current.thumbnail}\n          numComments={current.numComments}\n          ups={current.ups}\n          downs={current.downs}\n          permalink={current.permalink}\n          onClose={this.props.onDeleteCurrent}\n        />\n      );\n    }\n  }\n\n  render() {\n    return (\n      <WebLayout\n        onGoToProfile={this.props.onGoToProfile}\n        onSearchAction={this.props.onGetRedditNews}\n      >\n        <div>\n          {this.renderRedditContent()}\n          {this.renderShowCurrent()}\n        </div>\n      </WebLayout>\n    );\n  }\n}\n"]}