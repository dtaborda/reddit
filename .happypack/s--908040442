"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var RedditApi = function () {
  function RedditApi(api) {
    _classCallCheck(this, RedditApi);

    this.api = api;
  }

  _createClass(RedditApi, [{
    key: "getRedditSchema",
    value: function getRedditSchema(name) {
      return this.api.get({
        path: "/r/" + name + "/.json",
        ignoreAuthFailure: true
      });
    }
  }]);

  return RedditApi;
}();

exports.default = RedditApi;
;

var _temp = function () {
  if (typeof __REACT_HOT_LOADER__ === 'undefined') {
    return;
  }

  __REACT_HOT_LOADER__.register(RedditApi, "RedditApi", "/Users/damian.taborda/ws/whiteprompt/reddit/DamianTaborda_WebCodeChallenge/app/api/reddit_api.js");
}();

;