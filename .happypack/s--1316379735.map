{"version":3,"sources":["app/views/reddit/search_container/search/news_card_drag_and_drop/reddit_drop_ui/reddit_ui.jsx"],"names":["boxTarget","drop","props","monitor","url","onRedirect","ReeditUI","BOX","connect","connectDropTarget","dropTarget","isOver","canDrop","isActive","border","content","logo","title","func","isRequired","bool","string"],"mappings":";;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;AAEA;;;;;;;;;;;;AAEA,IAAMA,YAAY;AAChBC,MADgB,gBACXC,KADW,EACJC,OADI,EACK;AACnB,WAAO;AACLC,WAAKF,MAAMG,UAAN;AADA,KAAP;AAGD;AALe,CAAlB;;IAaqBC,Q,WALpB,0BAAW,qBAAUC,GAArB,EAA0BP,SAA1B,EAAqC,UAACQ,OAAD,EAAUL,OAAV;AAAA,SAAuB;AAC3DM,uBAAmBD,QAAQE,UAAR,EADwC;AAE3DC,YAAQR,QAAQQ,MAAR,EAFmD;AAG3DC,aAAST,QAAQS,OAAR;AAHkD,GAAvB;AAAA,CAArC,C;;;;;;;;;;;6BAgBU;AAAA,mBACwC,KAAKV,KAD7C;AAAA,UACCU,OADD,UACCA,OADD;AAAA,UACUD,MADV,UACUA,MADV;AAAA,UACkBF,iBADlB,UACkBA,iBADlB;;AAEP,UAAMI,WAAWD,WAAWD,MAA5B;;AAEA,UAAIG,SAAS,iBAAb;AACA,UAAID,QAAJ,EAAc;AACZC,iBAAS,gBAAT;AACD,OAFD,MAEO,IAAIF,OAAJ,EAAa;AAClBE,iBAAS,iBAAT;AACD;;AAED,aAAOL,kBACL;AAAA;AAAA,UAAK,OAAO,EAAEK,cAAF,EAAZ,EAAwB,WAAW,oBAAOC,OAA1C;AACE,+CAAK,KAAK,KAAKb,KAAL,CAAWc,IAArB,GADF;AAEE;AAAA;AAAA;AAAK,eAAKd,KAAL,CAAWe;AAAhB;AAFF,OADK,CAAP;AAMD;;;wBA3BsB;AACrB,aAAO;AACLR,2BAAmB,iBAAUS,IAAV,CAAeC,UAD7B;AAELR,gBAAQ,iBAAUS,IAAV,CAAeD,UAFlB;AAGLP,iBAAS,iBAAUQ,IAAV,CAAeD,UAHnB;AAILH,cAAM,iBAAUK,MAAV,CAAiBF,UAJlB;AAKLF,eAAO,iBAAUI,MAAV,CAAiBF;AALnB,OAAP;AAOD;;;;;kBATkBb,Q;;;;;;;;gCAbfN,S;;gCAaeM,Q","file":"reddit_ui.jsx","sourceRoot":"/Users/damian.taborda/ws/whiteprompt/reddit/DamianTaborda_WebCodeChallenge","sourcesContent":["import React, { Component, PropTypes } from 'react';\nimport ItemTypes from 'views/reddit/search_container/search/news_card_drag_and_drop/item_types';\nimport { DropTarget } from 'react-dnd';\n\nimport styles from './reddit_ui.scss';\n\nconst boxTarget = {\n  drop(props, monitor) {\n    return {\n      url: props.onRedirect()\n    };\n  }\n};\n\n@DropTarget(ItemTypes.BOX, boxTarget, (connect, monitor) => ({\n  connectDropTarget: connect.dropTarget(),\n  isOver: monitor.isOver(),\n  canDrop: monitor.canDrop()\n}))\nexport default class ReeditUI extends Component {\n  static get propTypes() {\n    return {\n      connectDropTarget: PropTypes.func.isRequired,\n      isOver: PropTypes.bool.isRequired,\n      canDrop: PropTypes.bool.isRequired,\n      logo: PropTypes.string.isRequired,\n      title: PropTypes.string.isRequired\n    };\n  }\n\n  render() {\n    const { canDrop, isOver, connectDropTarget } = this.props;\n    const isActive = canDrop && isOver;\n\n    let border = '1px solid white';\n    if (isActive) {\n      border = '1px solid blue';\n    } else if (canDrop) {\n      border = '1px solid white';\n    }\n\n    return connectDropTarget(\n      <div style={{ border }} className={styles.content}>\n        <img src={this.props.logo} />\n        <h4>{this.props.title}</h4>\n      </div>\n    );\n  }\n}\n"]}